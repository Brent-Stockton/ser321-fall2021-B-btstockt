apply plugin: 'application'



repositories {
    mavenCentral()
}

dependencies {
   compile group: 'org.json', name: 'json', version: '20200518'
}

//define main class
mainClassName = 'Concentration'

task runServer(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'taskone.Server'
  standardInput = System.in
  
  // run with arguments e.g.: gradle runServer -Pport=8000 -q --console=plain
  if (project.hasProperty('port')) {
    args(project.getProperty('port'));
  }
}


def host = 'localhost'
def port = 8000
def nthreads = 2

task arguments {
  if(project.hasProperty("host")) {
    host = project.getProperty("host")
  }
  if(project.hasProperty("port")) {
    port = project.getProperty("port")
  }
  if(project.hasProperty("nthreads")) {
    nthreads = project.getProperty("nthreads")
  }
}

task runThreadedServer(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'taskone.ThreadedServer'
  standardInput = System.in

  // run with arguments e.g.: gradle runThreadedServer -Pport=8000 -q --console=plain
  args port
}

task runThreadedPoolServer(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'taskone.ThreadedPoolServer'
  standardInput = System.in

  // run with arguments e.g.: gradle runThreadedPoolServer -Pport=8000 -Pnthreads=2 -q --console=plain
  args port
  args nthreads
}

task runClient(type: JavaExec) {
  group 'client'
  description 'Creates client socket sends a message to the server'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in

  main = 'taskone.Client'
  standardInput = System.in
  
  // run with arguments e.g.: gradle runClient -Phost=localhost -Pport=8000 -q --console=plain
  if (project.hasProperty("host") && project.hasProperty('port')) {
    args(project.getProperty('host'), project.getProperty('port'));
  }
}

